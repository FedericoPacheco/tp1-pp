Object subclass: #Cliente	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Cliente methodsFor: 'accessing' stamp: 'FedericoPacheco 9/22/2020 17:00'!idself subclassResponsibility.! !Cliente subclass: #ClienteEmpresa	instanceVariableNames: 'nombre cuit'	classVariableNames: ''	package: 'TP1'!!ClienteEmpresa methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 10:27'!inicializarClienteEmpresa: unNombre cuit: unCuitnombre := unNombre.cuit := unCuit.! !!ClienteEmpresa methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 11:37'!id ^ cuit.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClienteEmpresa class	instanceVariableNames: ''!!ClienteEmpresa class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 10:26'!agregarClienteEmpresa: unNombre cuit: unCuit^ self new inicializarClienteEmpresa: unNombre cuit: unCuit.! !Cliente subclass: #ClientePersona	instanceVariableNames: 'nombre apellido dni'	classVariableNames: ''	package: 'TP1'!!ClientePersona methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 11:37'!id^ dni.! !!ClientePersona methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 10:25'!inicializarClientePersona: unNombre apellido: unApellido dni: unDninombre := unNombre.apellido := unApellido.dni := unDni. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClientePersona class	instanceVariableNames: ''!!ClientePersona class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 10:24'!agregarClientePersona: unNombre apellido: unApellido dni: unDni^ self new inicializarClientePersona: unNombre apellido: unApellido dni: unDni. ! !Object subclass: #Comercio	instanceVariableNames: 'nombre cuit listadoProductos listadoPedidos'	classVariableNames: ''	package: 'TP1'!!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 09:28'!esVerduleria^ false.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 10:33'!inicializarComercio: unNombre cuit: unCuitnombre := unNombre.cuit := unCuit.listadoPedidos := OrderedCollection new.listadoProductos := OrderedCollection new.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 18:59'!buscarPedido: unIdPedido^ listadoPedidos detect: [ :unPedido | unPedido id = unIdPedido. ] ifNone: nil.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 10:48'!cuit^ cuit.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 15:08'!convertirAListadoItemPedido: unListadoItems|oCitems unProducto|oCitems := OrderedCollection new.unListadoItems do: [  	:unItem |				unProducto := self buscarProducto: (unItem at: 1). 				(unProducto = nil)			ifTrue: [ ^ nil. ]			ifFalse: 				[ oCitems add: (ItemPedido agregarItemPedido: unProducto unidades: (unItem at: 2)). ].			].^ oCitems.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 09:28'!esPanaderia^ false.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 09:27'!esCarniceria^ false.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 15:06'!buscarProducto: unCodigo^ listadoProductos detect: [ :unProducto | unProducto codigo = unCodigo ] ifNone: nil.! !!Comercio methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 09:28'!esDietetica^ false.! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/20/2020 17:57'!actualizarStock: unStock codigo: unCodigo |unProducto|unProducto := self buscarProducto: unCodigo.(unProducto = nil)	ifTrue: [ ^ 'Error. No existe tal producto.'. ]	ifFalse: [ ^ unProducto actualizarStock: unStock. ].! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/21/2020 16:33'!marcarPedidoEnviado: unIdPedido|unPedido|unPedido := self buscarPedido: unIdPedido.(unPedido fueDescargado)	ifTrue: [ unPedido establecerFechaEnvio. unPedido establecerComoEnviado. ]	ifFalse: [ ^ nil. ].! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/24/2020 12:35'!buscarCoincidenciasListadoProductos: unNombre^ listadoProductos select: [ :unProducto | (unProducto coincidenciaCon: unNombre) & (unProducto stockDisponible > 0) ]."|productosEncontrados|productosEncontrados := OrderedCollection new.listadoProductos do:[ 	:unProducto |		(unProducto coincidenciaCon: unNombre)		ifTrue:  		[ 			(unProducto stockDisponible > 0)				ifTrue: [ productosEncontrados add: unProducto. ].		].].^ productosEncontrados."! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/24/2020 12:53'!importeTotalVentasDia: unaFecha|suma|suma := 0.(listadoPedidos select: [ :unPedido | unPedido fechaEnvio equals: unaFecha. ])		do: [ :unPedido | suma := suma + unPedido importe. ]. "listadoPedidos do: [ 	:unPedido | 	(unPedido fechaEnvio = nil)		ifFalse: 		[			(unPedido fechaEnvio equals: unaFecha)				ifTrue: [ suma := suma + (unPedido importe) ].		]]."^ suma.! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/24/2020 12:54'!agregarProducto: unosDatosProducto|unProducto "existeProducto i"|"i := 1.existeProducto := false.[ (i <= (listadoProductos size)) & existeProducto not] whileTrue: [  	(((listadoProductos at: i) codigo) = (unosDatosProducto at: 1))		ifTrue: [ existeProducto := true. ].			i := i + 1.]."	("existeProducto" (self buscarProducto: (unosDatosProducto at: 1)) = nil)	"ifFalse:" ifTrue:	[		unProducto := Producto agregarProducto: unosDatosProducto comercio: self.		listadoProductos add: unProducto.		^unProducto.	]	"ifTrue:" ifFalse: [ ^ nil. ].	! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/24/2020 12:57'!pedidosEntregadosEn: unaFecha^ listadoPedidos select: [ :unPedido | unPedido fechaEnvio equals: unaFecha].		! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/19/2020 18:46'!descargarPedidos: unaFecha|listadoPedidosEnFecha|listadoPedidosEnFecha := listadoPedidos select: [ :unPedido | unaFecha equals: (unPedido fechaEmision) ].listadoPedidosEnFecha do: [ :unPedido | unPedido establecerComoDescargado. ].^ listadoPedidosEnFecha."|listadoPedidosEnFecha|listadoPedidosEnFecha := OrderedCollection new.listadoPedidos do: [  		:unPedido |				(unaFecha equals: (unPedido fechaEmision))			ifTrue: [ listadoPedidosEnFecha add: unPedido. unPedido establecerComoDescargado. ].].^ listadoPedidosEnFecha."! !!Comercio methodsFor: 'Metodos principales' stamp: 'FedericoPacheco 9/19/2020 15:20'!insertarPedido: unId cliente: unCliente productos: unListadoItems|oCitems unPedido aux|oCitems := self convertirAListadoItemPedido: unListadoItems.oCitems do:[	:unItem |		aux := ((unItem producto) stockDisponible) - (unItem unidades).	(aux < 0)		ifTrue: [ ^ nil. ]		ifFalse: [ (unItem producto) actualizarStock: aux ].].unPedido := Pedido agregarPedido: unId items: oCitems cliente: unCliente.listadoPedidos add: unPedido.^ unPedido.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Comercio class	instanceVariableNames: ''!!Comercio class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 09:39'!agregarComercio: unNombre cuit: unCuit^ self new inicializarComercio: unNombre cuit: unCuit.! !Comercio subclass: #Carniceria	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Carniceria methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 09:29'!esCarniceria^ true.! !Comercio subclass: #Dietetica	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Dietetica methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 09:29'!esDietetica^ true.! !Object subclass: #GestorPublicaciones	instanceVariableNames: 'cantidadPedidosRealizados listadoComercios listadoClientes'	classVariableNames: ''	package: 'TP1'!!GestorPublicaciones methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 13:28'!buscarCliente: unId ^ listadoClientes detect: [ :unCliente | unCliente id = unId ] ifNone: nil.! !!GestorPublicaciones methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/20/2020 16:59'!verificarClienteRepetido: unId |aux|aux := listadoClientes detect: [ :unCliente| unCliente id = unId ] ifNone: nil.	(aux = nil)	ifTrue: [ ^ false. ]	ifFalse: [ ^ true. ].! !!GestorPublicaciones methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 11:51'!inicializarGestorPublicacioneslistadoComercios := OrderedCollection new.listadoClientes := OrderedCollection new.cantidadPedidosRealizados := 0.! !!GestorPublicaciones methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/19/2020 13:27'!buscarComercio: unCuit^ listadoComercios detect: [ :unComercio | unComercio cuit = unCuit ] ifNone: nil.! !!GestorPublicaciones methodsFor: 'Metodos auxiliares' stamp: 'FedericoPacheco 9/20/2020 17:01'!verificarComercioRepetido: unCuit|aux|aux := listadoComercios detect: [ :unComercio | unComercio cuit = unCuit ] ifNone: nil.	(aux = nil)	ifTrue: [ ^ false. ]	ifFalse: [ ^ true. ].! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/20/2020 17:00'!agregarClientePersona: unNombre apellido: unApellido dni: unDni|unClientePersona|(self verificarClienteRepetido: unDni)	ifFalse: 	[		unClientePersona := ClientePersona agregarClientePersona: unNombre apellido: unApellido dni: unDni.		listadoClientes add: unClientePersona.		^ unClientePersona.	]	ifTrue: [ ^ nil. ].! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/24/2020 13:08'!agregarComercio: unNombre cuit: unCuit tipo: unTipoComercio |unComercio|unComercio := nil.(self verificarComercioRepetido: unCuit)	ifFalse: 	[		(unTipoComercio = 'Verduleria') 			ifTrue: [ unComercio := Verduleria agregarComercio: unNombre cuit: unCuit. ]			ifFalse: 			[  				(unTipoComercio = 'Panaderia')					ifTrue: [ unComercio := Panaderia agregarComercio: unNombre cuit: unCuit. ]					ifFalse:					[						(unTipoComercio = 'Dietetica')							ifTrue: [ unComercio := Dietetica agregarComercio: unNombre cuit: unCuit. ]							ifFalse: 							[								(unTipoComercio = 'Carniceria')									ifTrue: [ unComercio := Carniceria agregarComercio: unNombre cuit: unCuit. ]							].					].			].		(unComercio = nil)			ifFalse: [ listadoComercios add: unComercio. ]. 	].	^ unComercio. ! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/20/2020 17:03'!agregarClienteEmpresa: unNombre cuit: unCuit|unClienteEmpresa|(self verificarClienteRepetido: unCuit)	ifFalse: 	[		unClienteEmpresa := ClienteEmpresa agregarClienteEmpresa: unNombre cuit: unCuit.		listadoClientes add: unClienteEmpresa.		^unClienteEmpresa.  	]		ifTrue: [ ^ nil. ].! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/19/2020 18:31'!descargarPedidos: unaFecha enComercio: unCuit|unComercio|unComercio := self buscarComercio: unCuit.(unComercio = nil)	ifTrue: [ ^ 'Error. No existe tal comercio.' ]	ifFalse:	[ ^ unComercio descargarPedidos: unaFecha. ].! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/20/2020 18:17'!marcarPedidoEnviado: unIdPedido enComercio: unCuit|unComercio|unComercio := self buscarComercio: unCuit.(unComercio = nil)	ifTrue: [ ^ 'Error. No existe tal comercio.'. ]	ifFalse: 	[ 		((unComercio buscarPedido: unIdPedido) = nil)			ifTrue: [ ^ 'Error. No existe tal pedido.' ]			ifFalse:			[  				((unComercio marcarPedidoEnviado: unIdPedido) = nil)					ifTrue: [ ^ 'Descargue el pedido para poder enviarlo.' ]					ifFalse: [ ^ 'Envio registrado exitosamente.']. 			].	].! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/24/2020 13:03'!productosEnCarniceriaLlamados: unNombre|listadoProductosEncontrados|listadoProductosEncontrados := OrderedCollection new."listadoComercios do: [	:unComercio |		(unComercio esCarniceria)		ifTrue: 		[ listadoProductosEncontrados addAll: (unComercio buscarCoincidenciasListadoProductos: unNombre). ].].^ listadoProductosEncontrados."(listadoComercios select: [ :unComercio | unComercio esCarniceria ])	do: [ :unaCarniceria | listadoProductosEncontrados addAll: (unaCarniceria buscarCoincidenciasListadoProductos: unNombre) ].^ listadoProductosEncontrados.	! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/24/2020 13:03'!productosEnDieteticaLlamados: unNombre|listadoProductosEncontrados|listadoProductosEncontrados := OrderedCollection new."listadoComercios do: [	:unComercio |		(unComercio esDietetica)		ifTrue: 		[ listadoProductosEncontrados addAll: (unComercio buscarCoincidenciasListadoProductos: unNombre). ].]."(listadoComercios select: [ :unComercio | unComercio esDietetica ])	do: [ :unaDietetica | listadoProductosEncontrados addAll: (unaDietetica buscarCoincidenciasListadoProductos: unNombre) ].^ listadoProductosEncontrados.! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/24/2020 13:06'!agregarProducto: unosDatosProducto enComercio: unCuit|unComercio|unComercio := self buscarComercio: unCuit.(unComercio = nil)	ifTrue: [ ^'Error. No existe tal comercio.'. ]	ifFalse: [ ^ unComercio agregarProducto: unosDatosProducto. ]"|comercioExiste unProducto|comercioExiste := false.listadoComercios do: [	:unComercio |		(unComercio cuit = unCuit)		ifTrue: [ comercioExiste := true. unProducto := unComercio agregarProducto: unosDatosProducto. ].].(comercioExiste)	ifFalse: [ ^'Error. No existe tal comercio.'. ]	ifTrue: [ ^unProducto. ].	"! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/20/2020 17:57'!actualizarStock: unCodigoProducto nuevoValor: unStock enComercio: unCuit|unComercio|unComercio := self buscarComercio: unCuit.(unComercio = nil)	ifTrue: [ ^ 'Error. No existe tal comercio.'. ]	ifFalse: 	[ 		(unStock < 0)			ifTrue: [ ^ 'Error. Coloque un valor de stock valido.' ]			ifFalse: [ ^ unComercio actualizarStock: unStock codigo: unCodigoProducto. ].	]! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/24/2020 13:04'!productosEnPanaderiaLlamados: unNombre|listadoProductosEncontrados|listadoProductosEncontrados := OrderedCollection new."listadoComercios do: [	:unComercio |		(unComercio esPanaderia)		ifTrue: 		[ listadoProductosEncontrados addAll: (unComercio buscarCoincidenciasListadoProductos: unNombre). ].]."(listadoComercios select: [ :unComercio | unComercio esPanaderia ])	do: [ :unaPanaderia | listadoProductosEncontrados addAll: (unaPanaderia buscarCoincidenciasListadoProductos: unNombre) ].^ listadoProductosEncontrados.! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/20/2020 18:22'!importeTotalVentasDia: unaFecha enComercio: unCuit|unComercio|unComercio := self buscarComercio: unCuit.(unComercio = nil)	ifTrue: [ ^ 'Error. No existe tal comercio.' ]	ifFalse: [ ^ unComercio importeTotalVentasDia: unaFecha ].! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/24/2020 13:04'!productosEnVerduleriaLlamados: unNombre|listadoProductosEncontrados|listadoProductosEncontrados := OrderedCollection new."listadoComercios do: [	:unComercio |		(unComercio esVerduleria)		ifTrue: 		[ listadoProductosEncontrados addAll: (unComercio buscarCoincidenciasListadoProductos: unNombre). ].]."(listadoComercios select: [ :unComercio | unComercio esVerduleria ])	do: [ :unaVerduleria| listadoProductosEncontrados addAll: (unaVerduleria buscarCoincidenciasListadoProductos: unNombre) ].^ listadoProductosEncontrados.! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/24/2020 14:37'!insertarPedido: unIdCliente comercio: unCuit productos: unaListaItems|unComercio unCliente|unComercio := self buscarComercio: unCuit.(unComercio = nil)	ifTrue: [ ^ 'Error. No existe tal comercio.' ]	ifFalse:	[		unCliente := self buscarCliente: unIdCliente.		(unCliente = nil)			ifTrue: [ ^ 'Error. No existe tal cliente.' ]			ifFalse:			[					cantidadPedidosRealizados := cantidadPedidosRealizados + 1. 					^ unComercio insertarPedido: cantidadPedidosRealizados cliente: unCliente productos: unaListaItems.			].	].	! !!GestorPublicaciones methodsFor: 'Metodos consigna' stamp: 'FedericoPacheco 9/21/2020 15:59'!pedidosEntregadosDesde: unaFecha enComercio: unCuit"En realidad se implementa lo que dice la descripcion del metodo, equivalente a 'pedidosEntregadosEn: (...)' "|unComercio|unComercio := self buscarComercio: unCuit.(unComercio = nil)	ifTrue: [ ^ 'Error. No existe tal comercio.' ]	ifFalse: 		[ ^ unComercio pedidosEntregadosEn: unaFecha ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorPublicaciones class	instanceVariableNames: 'instanciaUnica'!!GestorPublicaciones class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/22/2020 15:56'!agregarGestorPublicaciones(instanciaUnica = nil)	ifTrue: [ instanciaUnica := self new inicializarGestorPublicaciones. ].^ instanciaUnica.! !!GestorPublicaciones class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/22/2020 16:01'!reiniciarInstanciacion"auxiliar, para pruebas"instanciaUnica := nil.! !Object subclass: #ItemPedido	instanceVariableNames: 'unidades precio producto'	classVariableNames: ''	package: 'TP1'!!ItemPedido methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 12:32'!producto^ producto.! !!ItemPedido methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 12:34'!unidades^ unidades.! !!ItemPedido methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 19:18'!importe^ unidades * precio.! !!ItemPedido methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 12:20'!inicializarItemPedido: unProducto unidades: unasUnidadesproducto := unProducto.unidades := unasUnidades.precio := unProducto precioVenta.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ItemPedido class	instanceVariableNames: ''!!ItemPedido class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 12:18'!agregarItemPedido: unProducto unidades: unasUnidades^ self new inicializarItemPedido: unProducto unidades: unasUnidades.! !Comercio subclass: #Panaderia	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Panaderia methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 09:29'!esPanaderia^ true.! !Object subclass: #Pedido	instanceVariableNames: 'id estado fueDescargado fechaEmision fechaEnvio listadoItems cliente'	classVariableNames: ''	package: 'TP1'!!Pedido methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 19:24'!fechaEmision^ fechaEmision.! !!Pedido methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 18:40'!establecerComoDescargadofueDescargado := true.! !!Pedido methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 18:40'!fueDescargado^ fueDescargado. ! !!Pedido methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 19:25'!fechaEnvio^ fechaEnvio.! !!Pedido methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 18:59'!id ^ id.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 19:01'!establecerFechaEnvio.fechaEnvio := Date today.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 18:37'!inicializarPedido: unId items: unaOCItems cliente: unClienteid := unId.estado := 'Pendiente'.fueDescargado := false.fechaEmision := Date today.listadoItems := unaOCItems.cliente := unCliente.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/21/2020 16:34'!establecerComoEnviadoestado := 'Enviado'.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 19:20'!importe |suma|suma := 0.listadoItems do: [ :unItem | suma := suma + (unItem importe)].^ suma. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pedido class	instanceVariableNames: ''!!Pedido class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 15:13'!agregarPedido: unId items: unaOCItems cliente: unCliente^self new inicializarPedido: unId items: unaOCItems cliente: unCliente.! !Object subclass: #Producto	instanceVariableNames: 'nombre codigo descripcion stockDisponible precioVenta comercio'	classVariableNames: ''	package: 'TP1'!!Producto methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/20/2020 17:43'!coincidenciaCon: unNombre|encontrada i j k iguales str1 str2| str1 := self sinEspaciosEnMinuscula: nombre.str2 := self sinEspaciosEnMinuscula: unNombre.encontrada := false.i := 1.[ (i <= ((str1 size) - (str2 size) + 1)) & encontrada not] whileTrue:[		( (str1 at: i) = (str2 at: 1) )		ifTrue: 		[ 			j := 2.				k := i + 1.				iguales := true.			[ (k <= str1 size) & (j <= str2 size) & iguales ] whileTrue:			[ 				((str1 at: k) = (str2 at: j))					ifFalse: [ iguales := false. ].										j := j + 1.					k := k + 1. 			].					(iguales)				ifTrue: [ encontrada := true. ].		].		i := i + 1.].^ encontrada.! !!Producto methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/24/2020 13:13'!sinEspaciosEnMinuscula: str|aux|aux := ''.1 to: (str size) do:[	:i |	((str at: i) = Character space)		ifFalse: [ aux := aux, (((str at: i) asLowercase) asString)].  ].^aux.! !!Producto methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 16:02'!inicializarProducto: unosDatosProducto comercio: unComerciocodigo := unosDatosProducto at: 1.nombre := unosDatosProducto at: 2.descripcion := unosDatosProducto at: 3.stockDisponible := unosDatosProducto at: 4.precioVenta := unosDatosProducto at: 5.comercio := unComercio.! !!Producto methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 15:49'!actualizarStock: unStockstockDisponible := unStock.^ unStock.! !!Producto methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 12:20'!precioVenta^ precioVenta.! !!Producto methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 11:11'!codigo^ codigo.! !!Producto methodsFor: 'accessing' stamp: 'FedericoPacheco 9/19/2020 12:33'!stockDisponible^ stockDisponible.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Producto class	instanceVariableNames: ''!!Producto class methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 16:01'!agregarProducto: unosDatosProducto comercio: unComercio^ self new inicializarProducto: unosDatosProducto comercio: unComercio.! !Comercio subclass: #Verduleria	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Verduleria methodsFor: 'as yet unclassified' stamp: 'FedericoPacheco 9/19/2020 09:29'!esVerduleria^ true.! !